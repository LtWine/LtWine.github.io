---
layout:     post
title:      "GITLAB CI + MAVEN"
date:       2019-07-21 00:00:00
author:     "Wine"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - tech
    - gitlab
    - cicd
    - maven
---

> how to build a good springboot projects with gitlab ci and maven version control

# project structure

## structure of maven project (base on springboot)
```bash
.
├── config-server
│   ├── pom.xml
│   ├── src
│   └── target
├── eureka-server
│   ├── pom.xml
│   └── src
├── mvn_config
│   ├── mvn-settings-develop.xml
│   ├── mvn-settings-master.xml
├── pom.xml
```

## structure of ci scripts
```bash
├── .gitlab-ci.yml
├── .gitlab
    └── ci
        ├── dev.gitlab-ci.yml
        ├── global.gitlab-ci.yml
        └── prod.gitlab-ci.yml
```

# code detail

## pom.xml
### parent
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.test</groupId>
    <artifactId>test-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>eureka-server</module>
        <module>config-server</module>
    </modules>
    <scm>
        <connection>scm:git:http://ip:port/gitlab/test/test.git</connection>
        <developerConnection>scm:git:http://ip:port/gitlab/test/test.git</developerConnection>
        <url>http://ip:port/gitlab/test/test.git</url>
  	</scm>
    <parent>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-parent</artifactId>
        <version>Finchley.SR1</version>
        <relativePath />
    </parent>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <compilerArguments>
                        <verbose />
                        <bootclasspath>${java.home}${file.separator}lib${file.separator}rt.jar${path.separator}${java.home}${file.separator}lib${file.separator}jce.jar</bootclasspath>
                    </compilerArguments>
                </configuration>
            </plugin>
            <!-- 可用于临时修改项目版本 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <generateBackupPoms>true</generateBackupPoms>
                </configuration>
            </plugin>
            <!-- 包管理插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5.3</version>
                <configuration>
                    <arguments>-Dmaven.test.skip=true</arguments>
                    <tagNameFormat>${project.artifactId}-${project.version}</tagNameFormat>
                    <tagBase>http://ip:port/gitlab/test/test/tags</tagBase>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                </configuration>
            </plugin>
          	<!-- 排除 javadoc 与 site 生命周期 -->
            <plugin>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <phase>install</phase>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>test.nexus</id>
            <name>test of Repository</name>
            <url>http://ip:port/nexus/repository/public/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>ignore</checksumPolicy>
            </releases>
        </repository>
    </repositories>
    <distributionManagement>
        <repository>
            <id>nexus-deploy-release</id>
            <name>Nexus Release Repositories</name>
            <url>http://ip:port/nexus/repository/test_release/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-deploy-snapshot</id>
            <name>Nexus Snapshots Repositories</name>
            <url>http://ip:port/nexus/repository/test_snapshots/</url>
        </snapshotRepository>
    </distributionManagement>
</project>
```
### child
#### config-server
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.test</groupId>
        <artifactId>test-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>config-server</artifactId>
    <packaging>jar</packaging>
	<name>config-server</name>
	<description>config-server</description>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
    </dependencies>
    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.test.ConfigServerApplication</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib</classpathPrefix>
                        </manifest>
                        <manifestEntries>
                            <Class-Path>./</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptors>
                        <descriptor>src/main/build/package.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <repositories>
        <repository>
            <id>test.nexus</id>
            <name>test of Repository</name>
            <url>http://ip:port/nexus/repository/public/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>ignore</checksumPolicy>
            </releases>
        </repository>
    </repositories>
</project>
```
#### eureka-server
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.test</groupId>
        <artifactId>test-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <artifactId>eureka-server</artifactId>
    <packaging>jar</packaging>
    <name>eureka-server</name>
    <description>eureka-server</description>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
    </dependencies>
    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.test.EurekaServerApplication</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib</classpathPrefix>
                        </manifest>
                        <manifestEntries>
                            <Class-Path>./</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptors>
                        <descriptor>src/main/build/package.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <repositories>
        <repository>
            <id>test.nexus</id>
            <name>test of Repository</name>
            <url>http://ip:port/nexus/repository/public/</url>
            <releases>
                <enabled>true</enabled>
                <updatePolicy>daily</updatePolicy>
                <checksumPolicy>ignore</checksumPolicy>
            </releases>
        </repository>
    </repositories>
</project>
```

## ci script
### .gitlab-ci.yml
```yml
# 全局变量定义
variables:
  CODE_PATH: ./Develop/SourceCode/Code/

# 阶段顺序
stages:
- build
- deploy


# 引用远程或者本地配置文件
include:
- local: .gitlab/ci/global.gitlab-ci.yml
```

### .gitlab/ci/global.gitlab-ci.yml
```yml
variables:
  DEV_NAME: test
  DEV_HOST: ip
  DEV_PASSWD: passwd
  MAVEN_CLI_OPTS_develop: "/mvn_config/mvn-settings-develop.xml --batch-mode"

.global script:
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
    - ${CODE_PATH}final_target
  stage: build
  script:
  - cd ${CODE_PATH}
  - TEMP_PATH=`pwd`
  - mkdir -p final_target
  - mvn -s ${TEMP_PATH}${MAVEN_CLI_OPTS} package deploy -B -e -U -Dmaven.test.skip=true -Dmaven.compile.fork=true
  # 使用assembly将各个应用打包成zip文件
  - rm -f ./final_target/*.zip
  - find ./ -name *.zip | grep -v final_target | xargs -i mv {} ./final_target/
  - find ./ -name *.zip

.global script deploy:
  stage: deploy
  script:
  - ': "==============          环境检测        ================="'
  - find ${CODE_PATH} -name *.zip

  - ': "================        开始部署         ================="'
  # 开始传包
  - sshpass -p ${PASSWD} scp -o StrictHostKeychecking=no ${CODE_PATH}final_target/*.zip ${NAME}@${HOST}:./
  # 执行部署脚本
  - sshpass -p ${PASSWD} ssh -o StrictHostKeychecking=no ${NAME}@${HOST} "echo '自行撰写部署脚本' "

  - ': "=============         检测是否成功启动        =============="'
  - sleep 30
  - sshpass -p ${PASSWD} ssh -o StrictHostKeychecking=no ${NAME}@${HOST} "jps | grep -v Jps "

# 结果包编译
mvn-package-dev:
  extends: .global script
  variables:
    MAVEN_CLI_OPTS: $MAVEN_CLI_OPTS_develop
  only:
    refs:
    - develop
    - merge_requests
    changes:
    - Develop/SourceCode/Code/**/*.{java,xml,properties,sh}

# 部署,运行
deploy:
  extends: .global script deploy
  variables:
    PASSWD: $DEV_PASSWD
    NAME: $DEV_NAME
    HOST: $DEV_HOST
  dependencies:
  - mvn-package-dev
  only:
    refs:
    - develop
    - merge_requests
    changes:
    - Develop/SourceCode/Code/**/*.{java,xml,properties,sh}
```


# use guide

### develop:
```test
develop branch and merge_requests will run you gitlab-runner to deploy the project
```
### master:
```test
1、copy code from #部署,运行 and change only refs to tags.
2、use  `mvn release:command`  plugin of maven to deploy the release version.
```



ps: I will update and supplement it when i'am happy.


